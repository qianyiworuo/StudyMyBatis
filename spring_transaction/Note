JDBCTemplate
    Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作
    <!-- 导入外部属性文件 -->
        <context:property-placeholder location="classpath:jdbc.properties" />
        <!-- 配置数据源 -->
        <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
            <property name="driverClassName" value="${jdbc.driver}"></property>
            <property name="url" value="${jdbc.url}"></property>
            <property name="username" value="${jdbc.user}"></property>
            <property name="password" value="${jdbc.password}"></property>
        </bean>
        <!-- 配置 JdbcTemplate -->
        <bean class="org.springframework.jdbc.core.JdbcTemplate">
            <!-- 装配数据源 -->
            <property name="dataSource" ref="druidDataSource"></property>
        </bean>

    //指定当前测试类在Spring的测试环境中执行，此时就可以通过注入的方式直接获取IOC容器中的Bean
    @RunWith(SpringJUnit4ClassRunner.class)
    //设置Spring测试环境的配置文件
    @ContextConfiguration("classpath:spring-jdbctemplate.xml")
    public class jdbcTemplateTest {
        @Autowired
        private JdbcTemplate jdbcTemplate;
        @Test
        public void insertTest(){
            String sql = "INSERT INTO t_user (id, username, password, age, gender, email)VALUES(null,?,?,?,?,?)";
            int result = jdbcTemplate.update(sql, "李四", "1234", 22, "女", "ls@qq.com");
            if(result > 0){
                System.out.println("新增成功："+ result);
            }
        }
        @Test
        public void updateTest(){
            String sql = "UPDATE t_user SET email = ? WHERE id = ?";
            int result = jdbcTemplate.update(sql, "lisi@qq.com", 9);
            if(result > 0){
                System.out.println("修改成功："+ result);
            }
        }
        @Test
        public void deleteTest(){
            String sql = "DELETE FROM t_user WHERE id = ?";
            int result = jdbcTemplate.update(sql, 9);
            if(result > 0){
                System.out.println("删除成功："+ result);
            }
        }
        //查询一条数据为一个实体类对象
        @Test
        public void queryOneDataTest(){
            String sql = "SELECT id, username, password, age, gender, email FROM t_user WHERE id = ?";
            User user = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<>(User.class), 1);
            if(user != null){
                System.out.println(user);
            }
        }
        //查询多条数据为一个list集合
        @Test
        public void queryMoreDataTest(){
            String sql = "SELECT id, username, password, age, gender, email FROM t_user";
            List<User> userList = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(User.class));
            if(userList != null){
                userList.forEach(System.out::println);
            }
        }
        //查询单行单列的值
        @Test
        public void countTest(){
            String sql = "SELECT count(id) FROM t_user";
            Integer count = jdbcTemplate.queryForObject(sql, Integer.class);
            if(count >= 0){
                System.out.println(count);
            }
        }
    }
声明式事务
    配置步骤
        1.在Spring的配置文件中添加配置：
            <!--配置事务管理器-->
                <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                    <property name="dataSource" ref="druidDataSource"></property>
                </bean>
                <!--开启事务的注解驱动
                    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务
                -->
                <!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就
                     是这个默认值，则可以省略这个属性 -->
                <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>
            2.添加事务注解
                因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理
                在BookServiceImpl的buybook()添加注解@Transactional
            @Transactional注解标识的位置
                @Transactional标识在方法上，咋只会影响该方法
                @Transactional标识的类上，咋会影响类中所有的方法
    事务属性
        只读
            对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这
            样数据库就能够针对查询操作来进行优化。
            @Transactional(readOnly = true)
            注意
                对增删改操作设置只读会抛出下面异常：
                Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification
                are not allowed
        超时
            事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间
            占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。
            此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常
            程序可以执行。
            概括来说就是一句话：超时回滚，释放资源。
            @Transactional(timeout = 3)
            执行过程中抛出异常：
                org.springframework.transaction.TransactionTimedOutException
        回滚策略
            声明式事务默认只针对运行时异常回滚，编译时异常不回滚。
            过@Transactional中相关属性设置回滚策略
                rollbackFor属性：需要设置一个Class类型的对象
                rollbackForClassName属性：需要设置一个字符串类型的全类名
                noRollbackFor属性：需要设置一个Class类型的对象
                rollbackFor属性：需要设置一个字符串类型的全类名
        事务隔离级别
            SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同
            的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。
            隔离级别一共有四种：
                读未提交：READ UNCOMMITTED
                    允许Transaction01读取Transaction02未提交的修改。
                读已提交：READ COMMITTED、
                    要求Transaction01只能读取Transaction02已提交的修改。
                可重复读：REPEATABLE READ
                    确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它
                    事务对这个字段进行更新。
                串行化：SERIALIZABLE
                    确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它
                    事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。
                隔离级别            脏读      不可重复读       幻读
                READ UNCOMMITTED    有           有           有
                READ COMMITTED      无           有           有
                REPEATABLE READ     无           无           有
                SERIALIZABLE        无           无           无
            使用方式
                @Transactional(isolation = Isolation.DEFAULT)//使用数据库默认的隔离级别
                @Transactional(isolation = Isolation.READ_UNCOMMITTED)//读未提交
                @Transactional(isolation = Isolation.READ_COMMITTED)//读已提交
                @Transactional(isolation = Isolation.REPEATABLE_READ)//可重复读
                @Transactional(isolation = Isolation.SERIALIZABLE)//串行化
    事务传播行为
            可以通过@Transactional中的propagation属性设置事务传播行为
            修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性
            @Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开
            启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调
            用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余
            额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不
            了，就都买不了。
            @Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启
            的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图
            书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受
            影响，即能买几本就买几本。
基于XML的声明式事务
    将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：
        <aop:config>
            <!-- 配置事务通知和切入点表达式 -->
            <aop:advisor advice-ref="txAdvice" pointcut="execution(*
            com.atguigu.spring.tx.xml.service.impl.*.*(..))"></aop:advisor>
        </aop:config>
        <!-- tx:advice标签：配置事务通知 -->
        <!-- id属性：给事务通知标签设置唯一标识，便于引用 -->
        <!-- transaction-manager属性：关联事务管理器 -->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <!-- tx:method标签：配置具体的事务方法 -->
                <!-- name属性：指定方法名，可以使用星号代表多个字符 -->
                <tx:method name="get*" read-only="true"/>
                <tx:method name="query*" read-only="true"/>
                <tx:method name="find*" read-only="true"/>
                <!-- read-only属性：设置只读属性 -->
                <!-- rollback-for属性：设置回滚的异常 -->
                <!-- no-rollback-for属性：设置不回滚的异常 -->
                <!-- isolation属性：设置事务的隔离级别 -->
                <!-- timeout属性：设置事务的超时属性 -->
                <!-- propagation属性：设置事务的传播行为 -->
                <tx:method name="save*" read-only="false" rollbackfor="java.lang.Exception" propagation="REQUIRES_NEW"/>
                <tx:method name="update*" read-only="false" rollbackfor="java.lang.Exception" propagation="REQUIRES_NEW"/>
                <tx:method name="delete*" read-only="false" rollbackfor="java.lang.Exception" propagation="REQUIRES_NEW"/>
            </tx:attributes>
        </tx:advice>
    注意：基于xml实现的声明式事务，必须引入aspectJ的依赖
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>5.3.1</version>
        </dependency>

