数据库字段名和实体类属性名不一致，处理方法
    方式一
    SQL语句字段起别名和属性名一致
    方式二(常用)
    当字段名符合MySQL命名规则使用_，属性名符合Java命名规则使用驼峰原则时
    可以在mybatis核心配置文件中设置一个全局配置，将数据库字段名自动映射成实体类属性名
    方式三
    自定义映射resultMap
        属性：
        id：表示自定义映射的唯一标识
        type：查询的数据要映射的实体类的类型
            子标签：
            id：设置主键的映射关系
            result：设置普通字段的映射关
            association：设置多对一的映射关系
            collection：设置一对多的映射关系
            属性：
            property：设置映射关系中实体类中的属性名
            column：设置映射关系中表中的字段名
        <resultMap id="empResultMap" type="Emp">
            <id column="emp_id" property="empId"></id>
            <result column="emp_name" property="empName"></result>
            <result column="age" property="age"></result>
            <result column="gender" property="gender"></result>
        </resultMap>
    <!--List<Emp> getAllEmp();-->
        <select id="getAllEmp" resultMap="empResultMap">
            SELECT emp_id, emp_name, age, gender, dept_id FROM t_emp
        </select>

自定义映射resultMap(多对一)
    方式一：
    级联方式处理映射关系
    <resultMap id="empAndDeptByEmpIdResultMap" type="Emp">
            <id column="emp_id" property="empId"></id>
            <result column="emp_name" property="empName"></result>
            <result column="age" property="age"></result>
            <result column="gender" property="gender"></result>
            <result column="dept_id" property="dept.deptId"></result>
            <result column="dept_name" property="dept.deptName"></result>
     </resultMap>
     方式二：


    1.级联方式
    <resultMap id="empAndDeptByEmpIdResultMap" type="Emp">
            <id column="emp_id" property="empId"></id>
            <result column="emp_name" property="empName"></result>
            <result column="age" property="age"></result>
            <result column="gender" property="gender"></result>
            <result column="dept_id" property="dept.deptId"></result>
            <result column="dept_name" property="dept.deptName"></result>
    </resultMap>
    2.association方式
            <!--javaType属性：java中的pojo实体类全类名，如在核心配置文件中typeAliases下配置了，则只需实体类名-->
            <association property="dept" javaType="Dept">
                <id column="dept_id" property="deptId"></id>
                <result column="dept_name" property="deptName"></result>
            </association>
    3.分步查询
    <resultMap id="getEmpAndDeptByStepResultMap" type="Emp">
            <id column="emp_id" property="empId"></id>
            <result column="emp_name" property="empName"></result>
            <result column="age" property="age"></result>
            <result column="gender" property="gender"></result>
            <!--
                property：设置需要处理映射关系的属性的属性名
                select：设置下一步分步查询sql的唯一标识
                column：设置分步查询的条件，将上一步查询出的某个字段作为此次查询的条件
            -->
            <association property="dept"
                         select="com.wd.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo" column="dept_id">
            </association>
        </resultMap>
    延迟加载
        分步查询的优点：可以实现延迟加载
        但是必须在核心配置文件中设置全局配置信息：
        lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载
        aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载
        此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和
        collection中的fetchType属性设置当前的分步查询是否使用延迟加载， fetchType="lazy(延迟加
        载)|eager(立即加载)"
自定义映射resultMap(一对多)
    1.collection方式(ofType属性表示集合中的实体类属性)
    <resultMap id="DeptAndEmpResultMap" type="Dept">
            <id column="dept_id" property="deptId"></id>
            <result column="dept_name" property="deptName"></result>
            <collection property="emps" ofType="Emp">
                <id column="emp_id" property="empId"></id>
                <result column="emp_name" property="empName"></result>
                <result column="age" property="age"></result>
                <result column="gender" property="gender"></result>
            </collection>
     </resultMap>
     2.分步查询
     <resultMap id="DeptAndEmpByStepResultMap" type="Dept">
             <id column="dept_id" property="deptId"></id>
             <result column="dept_name" property="deptName"></result>
             <collection property="emps"
                         select="com.wd.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo"
                         column="dept_id"
                         fetchType="lazy">
                 <id column="emp_id" property="empId"></id>
                 <result column="emp_name" property="empName"></result>
                 <result column="age" property="age"></result>
                 <result column="gender" property="gender"></result>
             </collection>
      </resultMap>


