RESTful
    RESTful简介
        具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。
        它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE
        用来删除资源。
        REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方
        式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。
          操作          传统方式                REST风格
        查询操作    getUserById?id=1       user/1-->get请求方式
        保存操作       saveUser            user-->post请求方式
        删除操作    deleteUser?id=1        user/1-->delete请求方式
        更新操作       updateUser          user-->put请求方式
    RESTful使用
        查询所有用户信息：/user--->get
            <a th:href="@{/user}">查询所有用户信息：/user--->get</a><br>

            @RequestMapping(value = "/user", method = RequestMethod.GET)
                public String getAllUser(Model model){
                    model.addAttribute("getAllUser","查询所有用户信息成功");
                    return "success";
                }
        根据id查询所有用户信息：/user/1--->get
            <a th:href="@{/user/1}">根据Id查询用户信息：/user/1--->get</a>
            @RequestMapping(value = "/user/{id}", method = RequestMethod.GET)
                public String getUser(Model model, @PathVariable("id") Integer id){
                    model.addAttribute("getUser","根据Id查询用户信息成功"+"id为："+ id);
                    return "success";
                }
     添加用户信息：/user--->post
        @RequestMapping(value = "/user", method = RequestMethod.POST)
            public String addUser(Model model) {
                model.addAttribute("addUser", "新增成功");
                return "success";
            }
     修改用户信息：/user--->put
        @RequestMapping(value = "/user",method = RequestMethod.PUT)
                    public String updateUser(){
                        System.out.println("修改成功");
                        return "success";
                    }
     删除用户信息：/user/1--->delete
        @RequestMapping(value = "/user/{id}",method = RequestMethod.DELETE)
                    public String deleteUser(@PathVariable("id") Integer id){
                        System.out.println("删除成功"+"id为："+ id);
                        return "success";
                    }
HiddenHttpMethodFilter
    由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？
    SpringMVC 提供了 HiddenHttpMethodFilter 帮助我们将 POST 请求转换为 DELETE 或 PUT 请求
    HiddenHttpMethodFilter 处理put和delete请求的条件：
         a>当前请求的请求方式必须为post
         b>当前请求必须传输请求参数_method
          <form th:action="@{/user}" method="post">
                 <input type="hidden"  name="_method" value="PUT"/>
                 <input type="submit" value="修改用户信息">
          </form>
    满足以上条件，HiddenHttpMethodFilter 过滤器就会将当前请求的请求方式转换为请求参数
                _method的值，因此请求参数_method的值才是最终的请求方式
                在web.xml中注册HiddenHttpMethodFilter
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filterclass>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping
    目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和
    HiddenHttpMethodFilter
    在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter
    原因：
    在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字
    符集的
    request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作
    而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作
RESTful案例
    查询所有返回列表