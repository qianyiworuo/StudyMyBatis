代理模式
    二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标
    方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑
    的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调用
    和打扰，同时让附加功能能够集中在一起也有利于统一维护。
        相关术语
            代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。
            目标：被代理“套用”了非核心逻辑代码的类、对象、方法。
        静态代理
            静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来
            说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代
            码，日志功能还是分散的，没有统一管理。
        动态代理
            1.jdk动态代理：要求目标对象必须实现接口，最终和目标类实现相同的接口，生成的代理类在com.sun.proxy包下
            类名为$proxy2
            2.cglib动态代理：生成的代理类会继承目标类，并且和目标类在相同的包下
            public class ProxyFactory {
                private Object target;

                public ProxyFactory(Object target) {
                    this.target = target;
                }

                /**
                 * newProxyInstance()：创建一个代理实例
                 * 1、classLoader：加载动态生成的代理类的类加载器
                 * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组
                 * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法
                 * @return
                 */
                public Object getProxy(){
                    ClassLoader classLoader = this.getClass().getClassLoader();
                    Class<?>[] interfaces = target.getClass().getInterfaces();
                    //匿名内部类
                    InvocationHandler invocationHandler = new InvocationHandler() {
                        @Override
                        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        /**
                            * proxy：代理对象
                            * method：代理对象需要实现的方法，即其中需要重写的方法
                            * args：method所对应方法的参数
                        */
                            Object result = null;
                            try {
                                System.out.println("[日志]"+ method.getName() +"方法开始了，参数是：" + Arrays.toString(args));
                                result = method.invoke(target, args);
                                System.out.println("[日志]"+ method.getName() +"方法结束了，结果是：" + result);
                            } catch (Exception e) {
                                e.printStackTrace();
                                System.out.println("[日志]"+ method.getName() +"方法异常，异常是：" + e);
                            }  finally {
                                System.out.println("[日志]"+ method.getName() +"方法执行完毕！");
                            }
                            return result;
                        }
                    };
                    return Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);
                }
            }
