RequestMapping注解
    从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联
    起来，建立映射关系。
    SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。
    注解位置
        @RequestMapping标识一个类：设置映射请求的请求路径的初始信息
        @RequestMapping标识一个方法：设置映射请求请求路径的具体信息
        当类和方法上都有注解时，此时浏览器请求路径为：/类注解路径/方法注解路径。
    注解的value属性
        @RequestMapping注解的value属性通过请求的请求地址匹配请求映射
        @RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址
        所对应的请求
        @RequestMapping注解的value属性必须设置，至少通过一个请求地址匹配请求映射
    注解的method属性
        @RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射
        @RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配
        多种请求方式的请求
        若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错
        405：Request method 'POST' not supported
    ant风格的路径
        @RequestMapping("/a?a/ant")
        ?：表示任意的单个字符，请求路径中不包括?
        @RequestMapping("/a*a/ant")
        *：表示任意的0个或多个字符，请求路径中不包括?和/
        @RequestMapping("/a**a/ant")
        **：表示任意层数的任意目录
        注意：在使用**时，只能使用/**/xxx的方式
    路径中的占位符(重点)
        原始方式：/deleteUser?id=1
        rest方式：/user/delete/1
        SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服
        务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在
        通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参。
        @RequestMapping("/rest/{username}/{id}")
            public String testRest(@PathVariable("id") Integer id, @PathVariable("username") String username){
                System.out.println("id的值："+id);
                System.out.println("username值："+ username);
                return "success";
            }
        //最终输出的内容为-->id:1,username:admin
SpringMVC获取请求参数
    通过ServletAPI获取
        在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在
        DispatcherServlet中就会将请求参数赋值给相应的形参
        <form th:action="@{/param/servletapi}" method="post">
                用户名:<input type="text" name="username"><br>
                密码:<input type="text"  name="password"><br>
                <input type="submit" value="提交"><br>
        </form>
        @RequestMapping("/param/servletapi")
            public String ServletAPITest(HttpServletRequest request){
                String username = request.getParameter("username");
                String password = request.getParameter("password");
                System.out.println("用户名："+username+"，密码："+password);
                return "success";
            }
    通过控制器方法的形参获取请求参数
        在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在
        DispatcherServlet中就会将请求参数赋值给相应的形参
        注：
            若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串
            数组或者字符串类型的形参接收此请求参数
            若使用字符串数组类型的形参，此参数的数组中包含了每一个数据
            若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果
            @RequestMapping("/param")
                public String ParamTest(@RequestParam(value = "userName",required = true, defaultValue = "user") String username, String password){
                    System.out.println("用户名："+username+"，密码："+password);
                    return "success";
                }
            @RequestParam是将请求参数和控制器方法的形参创建映射关系
            @RequestParam注解一共有三个属性：
            value：指定为形参赋值的请求参数的参数名
            required：设置是否必须传输此请求参数，默认值为true
            若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置
            defaultValue属性，则页面报错400：Required String parameter 'xxx' is not present；若设置为
            false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为
            null
            defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值
            为""时，则使用默认值为形参赋值
        @RequestHeader
            @RequestHeader是将请求头信息和控制器方法的形参创建映射关系
            @RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam
        @CookieValue
            @CookieValue是将cookie数据和控制器方法的形参创建映射关系
            @CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam
    通过POJO获取请求参数
        可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实
        体类中的属性名一致，那么请求参数就会为此属性赋值
解决获取请求参数的乱码问题
        <!--配置springMVC的编码过滤器-->
         <filter>
                <filter-name>CharacterEncodingFilter</filter-name>
                <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
                <init-param>
                    <param-name>encoding</param-name>
                    <param-value>UTF-8</param-value>
                </init-param>
                <init-param>
                    <param-name>forceEncoding</param-name>
                    <param-value>true</param-value>
                </init-param>
         </filter>
         <filter-mapping>
                <filter-name>CharacterEncodingFilter</filter-name>
                <url-pattern>/*</url-pattern>
        </filter-mapping>
域对象共享数据
    向request域对象共享数据
        使用ModelAndView向request域对象共享数据
             @RequestMapping("/modelandview/test")
                public ModelAndView test(){
                    /**
                     * ModelAndView有Model和View的功能
                     * Model主要用于向请求域共享数据
                     * View主要用于设置视图，实现页面跳转
                     */
                    ModelAndView mav = new ModelAndView();
                    //向请求域共享数据
                    mav.addObject("modelandviewrequestscope","Are you OK?");
                    //设置视图，实现页面跳转
                    mav.setViewName("success");
                    return mav;
                }
        使用Model向request域对象共享数据
            @RequestMapping("/model/test")
                public String ModelTest(Model model){
                    model.addAttribute("modeltest","Fan Thank You!");
                    return "success";
                }
        使用ModelMap向request域对象共享数据
            @RequestMapping("/modelmap/test")
                public String ModelMapTest(ModelMap modelMap){
                    modelMap.addAttribute("modelmaptest","How are you!");
                    return "success";
                }
        使用Map向request域对象共享数据
            @RequestMapping("/map/test")
                public String ModelMapTest(Map<String, Object> map){
                    map.put("maptest","What are you doing");
                    return "success";
                }